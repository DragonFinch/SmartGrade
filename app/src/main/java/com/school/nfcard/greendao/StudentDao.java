package com.school.nfcard.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.school.nfcard.entity.Student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ids = new Property(0, Long.class, "ids", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Schid = new Property(2, String.class, "schid", false, "SCHID");
        public final static Property Classid = new Property(3, String.class, "classid", false, "CLASSID");
        public final static Property Cardno = new Property(4, String.class, "cardno", false, "CARDNO");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Parentname = new Property(6, String.class, "parentname", false, "PARENTNAME");
        public final static Property Device_tokens = new Property(7, String.class, "device_tokens", false, "DEVICE_TOKENS");
        public final static Property Ios_or_android = new Property(8, String.class, "ios_or_android", false, "IOS_OR_ANDROID");
    }


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ids
                "\"ID\" TEXT," + // 1: id
                "\"SCHID\" TEXT," + // 2: schid
                "\"CLASSID\" TEXT," + // 3: classid
                "\"CARDNO\" TEXT," + // 4: cardno
                "\"NAME\" TEXT," + // 5: name
                "\"PARENTNAME\" TEXT," + // 6: parentname
                "\"DEVICE_TOKENS\" TEXT," + // 7: device_tokens
                "\"IOS_OR_ANDROID\" TEXT);"); // 8: ios_or_android
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String schid = entity.getSchid();
        if (schid != null) {
            stmt.bindString(3, schid);
        }
 
        String classid = entity.getClassid();
        if (classid != null) {
            stmt.bindString(4, classid);
        }
 
        String cardno = entity.getCardno();
        if (cardno != null) {
            stmt.bindString(5, cardno);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String parentname = entity.getParentname();
        if (parentname != null) {
            stmt.bindString(7, parentname);
        }
 
        String device_tokens = entity.getDevice_tokens();
        if (device_tokens != null) {
            stmt.bindString(8, device_tokens);
        }
 
        String ios_or_android = entity.getIos_or_android();
        if (ios_or_android != null) {
            stmt.bindString(9, ios_or_android);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String schid = entity.getSchid();
        if (schid != null) {
            stmt.bindString(3, schid);
        }
 
        String classid = entity.getClassid();
        if (classid != null) {
            stmt.bindString(4, classid);
        }
 
        String cardno = entity.getCardno();
        if (cardno != null) {
            stmt.bindString(5, cardno);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String parentname = entity.getParentname();
        if (parentname != null) {
            stmt.bindString(7, parentname);
        }
 
        String device_tokens = entity.getDevice_tokens();
        if (device_tokens != null) {
            stmt.bindString(8, device_tokens);
        }
 
        String ios_or_android = entity.getIos_or_android();
        if (ios_or_android != null) {
            stmt.bindString(9, ios_or_android);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ids
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // schid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // classid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cardno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // parentname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // device_tokens
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // ios_or_android
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setIds(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSchid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClassid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCardno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setParentname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDevice_tokens(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIos_or_android(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        return entity.getIds() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
